(()=>{"use strict";var t={304:(t,e,a)=>{a.d(e,{s:()=>o});const o="f06d23d621c748f1aed94259232004"}},e={};function a(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,a),i.exports}a.d=(t,e)=>{for(var o in e)a.o(e,o)&&!a.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=a(304);class e{constructor(t,e,a,o,r,i,c,s){this.city=t,this.condition=e,this.condition_icon=a,this.country=o,this.humidity=r,this.local_time=i,this.celsiusData=c,this.fahrenheitData=s}celsiusDataLog(){console.log("Feels Like: "+this.celsiusData.feelslike+" C\n","Temperature: "+this.celsiusData.temperature+" C\n","Wind Speed: "+this.celsiusData.wind+" kph\n")}fahrenheitDataLog(){console.log("Feels Like: "+this.fahrenheitData.feelslike+" F\n","Temperature: "+this.fahrenheitData.temperature+" F\n","Wind Speed: "+this.fahrenheitData.wind+" mph\n")}basicDataLog(){console.log(this.city+"\n",this.condition+"\n",this.condition_icon+"\n",this.country+"\n",this.humidity+"\n",this.local_time+"\n")}}class o{constructor(t){this.dailyForecast=t}test(){console.log(this.dailyForecast)}}class r{constructor(t){this.hourlyForecast=t}test(){console.log(this.hourlyForecast)}}document.getElementById("searchButton").addEventListener("click",(a=>{a.preventDefault(),async function(e){try{const a=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${t.s}&q=${e}&days=3`,{mode:"cors"}),o=await a.json(),r={basic_data:{country:o.location.country,city:o.location.name,local_time:o.location.localtime,condition:o.current.condition.text,condition_icon:o.current.condition.icon,humidity:o.current.humidity},celsius:{feelslike:o.current.feelslike_c,temperature:o.current.temp_c,wind:o.current.wind_kph},fahrenheit:{feelslike:o.current.feelslike_f,temperature:o.current.temp_f,wind:o.current.wind_mph},forecast:{forecast_per_day_Celsius:{},forecast_per_day_Fahrenheit:{},forecast_per_hour:{}}};function i(){for(let t=0;t<3;t++)r.forecast.forecast_per_day_Celsius["day"+t]={date:o.forecast.forecastday[t].date,min_temp:o.forecast.forecastday[t].day.mintemp_c,max_temp:o.forecast.forecastday[t].day.maxtemp_c}}function c(){for(let t=0;t<3;t++)r.forecast.forecast_per_day_Fahrenheit["day"+t]={date:o.forecast.forecastday[t].date,min_temp:o.forecast.forecastday[t].day.mintemp_f,max_temp:o.forecast.forecastday[t].day.maxtemp_f}}function s(){for(let t=0;t<3;t++){r.forecast.forecast_per_hour["day"+t]={date:o.forecast.forecastday[t].date},r.forecast.forecast_per_hour["day"+t].hour={};for(let e=0;e<24;e++)r.forecast.forecast_per_hour["day"+t].hour["hour"+e]={condition:o.forecast.forecastday[t].hour[e].condition.icon,temperatureC:o.forecast.forecastday[t].hour[e].temp_c,temperatureF:o.forecast.forecastday[t].hour[e].temp_f,humidity:o.forecast.forecastday[t].hour[e].humidity,will_rain:o.forecast.forecastday[t].hour[e].will_it_rain}}}return i(),c(),s(),r}catch(n){console.log(n)}}(document.getElementById("location").value).then((t=>{const{city:a,condition:i,condition_icon:c,country:s,humidity:n,local_time:d}=t.basic_data,f=t.celsius,h=t.fahrenheit,l=t.forecast.forecast_per_day_Celsius,u=t.forecast.forecast_per_hour,y=new e(a,i,c,s,n,d,f,h);new o(l),new r(u),y.basicDataLog(),y.celsiusDataLog(),y.fahrenheitDataLog()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,