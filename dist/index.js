(()=>{"use strict";var t={304:(t,e,o)=>{o.d(e,{s:()=>r});const r="f06d23d621c748f1aed94259232004"}},e={};function o(r){var a=e[r];if(void 0!==a)return a.exports;var c=e[r]={exports:{}};return t[r](c,c.exports,o),c.exports}o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=o(304);class e{constructor(t,e,o,r,a,c,s,i){this.city=t,this.condition=e,this.condition_icon=o,this.country=r,this.humidity=a,this.local_time=c,this.celsiusData=s,this.fahrenheitData=i}test(){console.log(this.city+"\n",this.condition+"\n",this.condition_icon+"\n",this.country+"\n",this.humidity+"\n",this.local_time+"\n",this.celsiusData+"\n",this.fahrenheitData+"\n")}}class r{constructor(t){this.dailyForecast=t}test(){console.log(this.dailyForecast)}}class a{constructor(t){this.hourlyForecast=t}test(){console.log(this.hourlyForecast)}}const c=document.getElementById("location").value;document.getElementById("searchButton").addEventListener("click",(t=>{t.preventDefault(),console.log(c)})),async function(e){try{const o=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${t.s}&q=London&days=3`,{mode:"cors"}),r=await o.json();console.log(r);const a={basic_data:{country:r.location.country,city:r.location.name,local_time:r.location.localtime,condition:r.current.condition.text,condition_icon:r.current.condition.icon,humidity:r.current.humidity},celsius:{feelslike:r.current.feelslike_c,temperature:r.current.temp_c,wind:r.current.wind_kph},fahrenheit:{feelslike:r.current.feelslike_f,temperature:r.current.temp_f,wind:r.current.wind_mph},forecast:{forecast_per_day_Celsius:{},forecast_per_day_Fahrenheit:{},forecast_per_hour:{}}};function c(){for(let t=0;t<3;t++)a.forecast.forecast_per_day_Celsius["day"+t]={date:r.forecast.forecastday[t].date,min_temp:r.forecast.forecastday[t].day.mintemp_c,max_temp:r.forecast.forecastday[t].day.maxtemp_c}}function s(){for(let t=0;t<3;t++)a.forecast.forecast_per_day_Fahrenheit["day"+t]={date:r.forecast.forecastday[t].date,min_temp:r.forecast.forecastday[t].day.mintemp_f,max_temp:r.forecast.forecastday[t].day.maxtemp_f}}function i(){for(let t=0;t<3;t++){a.forecast.forecast_per_hour["day"+t]={date:r.forecast.forecastday[t].date},a.forecast.forecast_per_hour["day"+t].hour={};for(let e=0;e<24;e++)a.forecast.forecast_per_hour["day"+t].hour["hour"+e]={condition:r.forecast.forecastday[t].hour[e].condition.icon,temperatureC:r.forecast.forecastday[t].hour[e].temp_c,temperatureF:r.forecast.forecastday[t].hour[e].temp_f,humidity:r.forecast.forecastday[t].hour[e].humidity,will_rain:r.forecast.forecastday[t].hour[e].will_it_rain}}}return c(),s(),i(),a}catch(n){console.log(n)}}().then((t=>{const{city:o,condition:c,condition_icon:s,country:i,humidity:n,local_time:d}=t.basic_data,f=t.celsius,l=t.fahrenheit,u=t.forecast.forecast_per_day_Celsius,h=t.forecast.forecast_per_hour,y=new e(o,c,s,i,n,d,f,l),_=new r(u),m=new a(h);y.test(),_.test(),m.test(),console.log(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,