(()=>{"use strict";var e={810:(e,t,n)=>{function a(e,t,n,a){let i=document.getElementById("data-bar"),r=document.createElement("p");r.classList.add("dailyDateHolder");let o=e.split("-").slice(1,3).join("/");0==o.split("")[6]&&(o=o.split(""),o.splice(6,1),o=o.join("")),o&&(r.innerHTML=o);let s=document.createElement("img");s.classList.add("dailyConditionIcon"),s.setAttribute("src",t),s.setAttribute("alt","Weather Condition Icon");let c=document.createElement("p");c.classList.add("dailyConditionText"),c.innerHTML=a;let d=document.createElement("h2");d.classList.add("dailyTemperatureHolder");let l=document.createElement("p");l.classList.add("moreText"),l.innerHTML="Avg temp: <br>",d.innerHTML=n+" °C";let u=document.createElement("div");u.classList.add("dailyContainer"),u.appendChild(s),u.appendChild(c),u.appendChild(r),u.appendChild(l),u.appendChild(d),i.appendChild(u)}function i(e,t,n,a){let i=document.getElementById("data-bar"),r=document.createElement("p");r.classList.add("hourlyDateHolder");let o=e.split("-").slice(1,3).join("/");0==o.split("")[6]&&(o=o.split(""),o.splice(6,1),o=o.join("")),o&&(r.innerHTML=o);let s=document.createElement("img");s.classList.add("hourlyConditionIcon"),s.setAttribute("src",t),s.setAttribute("alt","Weather Condition Icon");let c=document.createElement("p");c.classList.add("hourlyConditionText"),c.innerHTML=a;let d=document.createElement("h2");d.classList.add("hourlyTemperatureHolder"),d.innerHTML=n+" °C";let l=document.createElement("div");l.classList.add("hourlyContainer"),l.appendChild(s),l.appendChild(c),l.appendChild(r),l.appendChild(d),i.appendChild(l)}function r(e){const t=document.getElementsByClassName("dailyTemperatureHolder");if(t[0])for(let n=0;n<Object.keys(e).length;n++){let a=e["day"+n].avg_tempF;t[n].innerHTML=a+" °F"}}function o(e){const t=document.getElementsByClassName("dailyTemperatureHolder");if(t[0])for(let n=0;n<Object.keys(e).length;n++){let a=e["day"+n].avg_tempC;t[n].innerHTML=a+" °C"}}function s(e){const t=document.getElementsByClassName("hourlyTemperatureHolder");if(t[0])for(let n=0;n<Object.keys(e).length;n++)for(let a=0;a<24;a++){let i=e["day"+n].hour["hour"+a].temperatureF;0==n?t[a].innerHTML=i+" °F":1==n?t[24+a].innerHTML=i+" °F":t[48+a].innerHTML=i+" °F"}}function c(e){const t=document.getElementsByClassName("hourlyTemperatureHolder");if(t[0])for(let n=0;n<Object.keys(e).length;n++)for(let a=0;a<24;a++){let i=e["day"+n].hour["hour"+a].temperatureC;0==n?t[a].innerHTML=i+" °C":1==n?t[24+a].innerHTML=i+" °C":t[48+a].innerHTML=i+" °C"}}function d(){const e=document.getElementById("data-bar"),t=document.getElementsByClassName("leftArrow")[0],n=document.getElementsByClassName("rightArrow")[0],a=e.querySelector(".dailyContainer").offsetWidth;console.log(a),t.addEventListener("click",(()=>{e.scrollLeft-=3*a})),n.addEventListener("click",(()=>{e.scrollLeft+=3*a}))}n.d(t,{Fn:()=>i,Sp:()=>d,j1:()=>a,p:()=>r,tB:()=>c,tQ:()=>o,up:()=>s}),function(){let e=document.getElementById("upper-bar"),t=document.createElement("button");t.classList.add("dailyButton"),t.innerHTML="Daily";let n=document.createElement("button");n.classList.add("hourlyButton"),n.innerHTML="Hourly";let a=document.createElement("div");a.classList.add("arrowContainer");let i=document.createElement("p");i.classList.add("leftArrow");let r=document.createElement("p");r.classList.add("rightArrow"),a.appendChild(i),a.appendChild(r),0==e.childNodes.length?(e.appendChild(t),e.appendChild(n),e.appendChild(a)):(e.replaceChild(t,e.children[0]),e.replaceChild(n,e.children[1]),e.replaceChild(a,e.children[2]))}(),function(){const e=document.getElementById("data-bar");e.addEventListener("wheel",(t=>{t.preventDefault(),e.scrollBy({left:t.deltaY<0?-30:30})}))}(),function(){const e=document.getElementById("data-bar");let t=!1,n=0;e.addEventListener("mousedown",(e=>{t=!0,n=e.pageX})),e.addEventListener("mousemove",(a=>{if(!t)return;a.preventDefault();const i=a.pageX,r=n-i;e.scrollLeft+=r,n=i})),e.addEventListener("mouseup",(e=>{t=!1,n=0}))}(),function(){const e=document.getElementById("data-bar");let t=0,n=0,a=0,i=!1;e.addEventListener("touchstart",(e=>{t=e.touches[0].pageX,n=Date.now(),i=!0,a=0})),e.addEventListener("touchmove",(r=>{if(!i)return;r.preventDefault();const o=r.touches[0].pageX,s=t-o;e.scrollLeft+=s,t=o;const c=Date.now();a=s/(c-n),n=c})),e.addEventListener("touchend",(()=>{i=!1,function t(){Math.abs(a)>.01&&(e.scrollLeft+=a,a*=.9,requestAnimationFrame(t))}()}))}()},743:(e,t,n)=>{n.d(t,{Ti:()=>o,Xe:()=>l,Xu:()=>i,dj:()=>r,of:()=>c,pg:()=>d,rO:()=>u,rz:()=>s});var a=n(530);function i(e,t,n,a,i,r){const o=document.getElementById("basic-data");let s=document.createElement("h2");s.classList.add("cityCountryNameName"),s.innerHTML=e+", "+t;let c=document.createElement("p");c.classList.add("timeDate"),c.innerHTML=n;let d=document.createElement("div");d.classList.add("conditionContainer");let l=document.createElement("img");l.setAttribute("src",a),l.setAttribute("alt","Weather Condition Icon");let u=document.createElement("h2");u.classList.add("whetherCondition"),u.innerHTML=i,d.appendChild(u),d.appendChild(l);let h=document.createElement("h1");h.classList.add("currentTemperature"),h.innerHTML=r+" °C",0==o.childNodes.length?(o.appendChild(s),o.appendChild(c),o.appendChild(d),o.appendChild(h)):(o.replaceChild(s,o.children[0]),o.replaceChild(c,o.children[1]),o.replaceChild(d,o.children[2]),o.replaceChild(h,o.children[3]))}function r(e,t,n,i,r,o,s){const c=document.getElementById("additional-data");let d=document.createElement("p");d.classList.add("humidityData"),d.innerHTML="Humidity<br>"+e+" %";let l=document.createElement("p");l.classList.add("feelslikeData"),l.innerHTML="Feels Like<br>"+t+" °C";let u=document.createElement("p");u.classList.add("windspeedData"),u.innerHTML="Wind Speed<br>"+n+" kph";let h=document.createElement("p");h.classList.add("chanceRainData"),h.innerHTML="Chance Of Rain<br>"+(0,a.K)(s,o)+" %",0==i[0]&&((i=i.split("")).shift(),i=i.join(""));let m=document.createElement("p");m.classList.add("sunriseData"),m.innerHTML="Sunrise<br>"+i,0==r[0]&&((r=r.split("")).shift(),r=r.join(""));let p=document.createElement("p");p.classList.add("sunsetData"),p.innerHTML="Sunset<br>"+r,0==c.childNodes.length?(c.appendChild(d),c.appendChild(l),c.appendChild(u),c.appendChild(m),c.appendChild(p),c.appendChild(h)):(c.replaceChild(d,c.children[0]),c.replaceChild(l,c.children[1]),c.replaceChild(u,c.children[2]),c.replaceChild(m,c.children[3]),c.replaceChild(p,c.children[4]),c.replaceChild(h,c.children[5]))}function o(){const e=document.getElementsByClassName("form")[0];if(2==e.childNodes.length)return;const t=document.createElement("div");t.classList.add("wrongInput"),t.innerHTML='Location not found. Try "City", "City, State" or "City, Country".',e.appendChild(t)}function s(){const e=document.getElementsByClassName("form")[0];2==e.childNodes.length&&e.lastChild.remove()}function c(){const e=document.getElementById("basic-data"),t=document.createElement("button");if(t.classList.add("convertToFahrenheit"),t.innerHTML="Convert to °F",!e.contains(document.getElementsByClassName("convertButtonContainer")[0]))return e.appendChild(t),t}function d(){const e=document.getElementById("basic-data"),t=document.createElement("button");if(t.classList.add("convertToCelsius"),t.innerHTML="Convert to °C",!e.contains(document.getElementsByClassName("convertButtonContainer")[0]))return e.appendChild(t),t}function l(e,t,n){document.getElementsByClassName("currentTemperature")[0].innerHTML=e+" °F",document.getElementsByClassName("feelslikeData")[0].innerHTML="Feels Like<br>"+t+" °F",document.getElementsByClassName("windspeedData")[0].innerHTML="Wind Speed<br>"+n+" mph"}function u(e,t,n){document.getElementsByClassName("currentTemperature")[0].innerHTML=e+" °C",document.getElementsByClassName("feelslikeData")[0].innerHTML="Feels Like<br>"+t+" °C",document.getElementsByClassName("windspeedData")[0].innerHTML="Wind Speed<br>"+n+" kph"}},304:(e,t,n)=>{n.d(t,{s:()=>a});const a="f06d23d621c748f1aed94259232004"},530:(e,t,n)=>{function a(e,t){let n=0,a=0,i=[];for(let r=0;r<Object.keys(e.day0.hour).length;r++){let o=e.day0.hour[`hour${r}`].time;if(new Date(o).getTime()>new Date(t).getTime()&&e.day0.hour[`hour${r}`].chance_of_rain>0){if(a+=1,a>1){i[1]=e.day0.hour[`hour${r}`].chance_of_rain;let t=i[0]/100,n=t+i[1]/100*(1-t);i[0]=100*n}else i.push(e.day0.hour[`hour${r}`].chance_of_rain);n+=e.day0.hour[`hour${r}`].chance_of_rain}}return 0==a?0:1==a?n:Math.round(100*i[0])/100}n.d(t,{K:()=>a})}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={exports:{}};return e[a](r,r.exports,n),r.exports}n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(304),t=n(743),a=n(810);class i{constructor(e,t,n,a,i,r,o,s,c,d,l){this.country=e,this.city=t,this.local_time=n,this.condition=a,this.condition_icon=i,this.humidity=r,this.sunrise=o,this.sunset=s,this.celsiusData=c,this.fahrenheitData=d,this.hourlyForecastData=l}basicDataDOM(){(0,t.Xu)(this.city,this.country,this.local_time,this.condition_icon,this.condition,this.celsiusData.temperature)}additionalDataDOM(){(0,t.dj)(this.humidity,this.celsiusData.feelslike,this.celsiusData.wind,this.sunrise,this.sunset,this.local_time,this.hourlyForecastData)}dataConverter(){let e=(0,t.of)(),n=(0,t.pg)();if(null!=e||null!=n){const a=document.getElementById("basic-data"),i=document.createElement("div");i.classList.add("convertButtonContainer"),i.appendChild(e),i.appendChild(n),a.appendChild(i),e.addEventListener("click",(()=>{(0,t.Xe)(this.fahrenheitData.temperature,this.fahrenheitData.feelslike,this.fahrenheitData.wind)})),n.addEventListener("click",(()=>{(0,t.rO)(this.celsiusData.temperature,this.celsiusData.feelslike,this.celsiusData.wind)}))}}}class r{constructor(e){this.dailyForecast=e}generateDailyData(){const e=document.getElementById("data-bar");for(;e.firstChild;)e.removeChild(e.firstChild);for(let e=0;e<Object.keys(this.dailyForecast).length;e++){let t=this.dailyForecast["day"+e].date,n=this.dailyForecast["day"+e].condition_icon,i=this.dailyForecast["day"+e].avg_tempC,r=this.dailyForecast["day"+e].condition;(0,a.j1)(t,n,i,r)}}generateDailyDataButton(){document.getElementsByClassName("dailyButton")[0].addEventListener("click",(()=>{let e=document.getElementsByClassName("currentTemperature")[0].innerHTML.split("");"F"==e[e.length-1]?(this.generateDailyData(),(0,a.p)(this.dailyForecast)):this.generateDailyData()}))}dataConverter(){let e=document.getElementsByClassName("convertToFahrenheit")[0],t=document.getElementsByClassName("convertToCelsius")[0];e.addEventListener("click",(()=>{(0,a.p)(this.dailyForecast)})),t.addEventListener("click",(()=>{(0,a.tQ)(this.dailyForecast)}))}}class o{constructor(e){this.hourlyForecast=e}generateHourlyData(){const e=document.getElementById("data-bar");for(;e.firstChild;)e.removeChild(e.firstChild);for(let e=0;e<Object.keys(this.hourlyForecast).length;e++)for(let t=0;t<24;t++){let n=this.hourlyForecast["day"+e].hour["hour"+t].time,i=this.hourlyForecast["day"+e].hour["hour"+t].condition_icon,r=this.hourlyForecast["day"+e].hour["hour"+t].temperatureC,o=this.hourlyForecast["day"+e].hour["hour"+t].condition;(0,a.Fn)(n,i,r,o)}}generateHourlyDataButton(){document.getElementsByClassName("hourlyButton")[0].addEventListener("click",(()=>{let e=document.getElementsByClassName("currentTemperature")[0].innerHTML.split("");"F"==e[e.length-1]?(this.generateHourlyData(),(0,a.up)(this.hourlyForecast)):this.generateHourlyData()}))}dataConverter(){let e=document.getElementsByClassName("convertToFahrenheit")[0],t=document.getElementsByClassName("convertToCelsius")[0];e.addEventListener("click",(()=>{(0,a.up)(this.hourlyForecast)})),t.addEventListener("click",(()=>{(0,a.tB)(this.hourlyForecast)}))}}function s(n){(async function(n){(0,t.rz)();try{let a=await("krakow"==n?n+" pl":n);const i=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${e.s}&q=${a}&days=3`,{mode:"cors"}),r=await i.json();console.log(r);const o={basic_data:{country:r.location.country,city:r.location.name,local_time:r.location.localtime,condition:r.current.condition.text,condition_icon:"https:"+r.current.condition.icon,humidity:r.current.humidity,sunrise:r.forecast.forecastday[0].astro.sunrise,sunset:r.forecast.forecastday[0].astro.sunset},celsius:{feelslike:r.current.feelslike_c,temperature:r.current.temp_c,wind:r.current.wind_kph},fahrenheit:{feelslike:r.current.feelslike_f,temperature:r.current.temp_f,wind:r.current.wind_mph},forecast:{forecast_per_day:{},forecast_per_hour:{}}};function s(){for(let e=0;e<3;e++)o.forecast.forecast_per_day["day"+e]={date:r.forecast.forecastday[e].date,condition_icon:"https:"+r.forecast.forecastday[e].day.condition.icon,condition:r.forecast.forecastday[e].day.condition.text,avg_tempC:r.forecast.forecastday[e].day.avgtemp_c,avg_tempF:r.forecast.forecastday[e].day.avgtemp_f}}function c(){for(let e=0;e<3;e++){o.forecast.forecast_per_hour["day"+e]={date:r.forecast.forecastday[e].date},o.forecast.forecast_per_hour["day"+e].hour={};for(let t=0;t<24;t++)o.forecast.forecast_per_hour["day"+e].hour["hour"+t]={condition_icon:"https:"+r.forecast.forecastday[e].hour[t].condition.icon,condition:r.forecast.forecastday[e].hour[t].condition.text,temperatureC:r.forecast.forecastday[e].hour[t].temp_c,temperatureF:r.forecast.forecastday[e].hour[t].temp_f,humidity:r.forecast.forecastday[e].hour[t].humidity,chance_of_rain:r.forecast.forecastday[e].hour[t].chance_of_rain,chance_of_snow:r.forecast.forecastday[e].hour[t].chance_of_snow,time:r.forecast.forecastday[e].hour[t].time}}}return s(),c(),o}catch(d){console.log(d),(0,t.Ti)()}})(n).then((e=>{const{country:t,city:n,local_time:a,condition:s,condition_icon:c,humidity:d,sunrise:l,sunset:u}=e.basic_data,h=e.celsius,m=e.fahrenheit,p=e.forecast.forecast_per_day,y=e.forecast.forecast_per_hour,f=new i(t,n,a,s,c,d,l,u,h,m,y),C=new r(p),L=new o(y);f.basicDataDOM(),f.additionalDataDOM(),f.dataConverter(),C.generateDailyData(),C.generateDailyDataButton(),C.dataConverter(),L.generateHourlyDataButton(),L.dataConverter()})).then((()=>{(0,a.Sp)()})).catch((e=>{console.log(e)}))}document.getElementById("searchButton").addEventListener("click",(e=>{e.preventDefault(),s(document.getElementById("location").value)})),async function(){try{const t=await fetch(`https://api.weatherapi.com/v1/ip.json?key=${e.s}&q=auto:ip`,{mode:"cors"});return{ip:(await t.json()).ip}}catch(e){console.log(e)}}().then((e=>{s(e.ip)})).catch((e=>{console.log(e),s("London")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,