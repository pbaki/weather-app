(()=>{"use strict";var e={810:(e,t,a)=>{function n(e,t,a){let n=document.getElementById("data-bar"),i=document.createElement("p");i.classList.add("dailyDateHolder"),i.innerHTML=e;let o=document.createElement("img");o.classList.add("dailyConditionIcon"),o.setAttribute("src",t),o.setAttribute("alt","Weather Condition Icon");let r=document.createElement("h1");r.classList.add("dailyTemperatureHolder"),r.innerHTML=a+" °C";let c=document.createElement("div");c.classList.add("dailyContainer"),c.appendChild(o),c.appendChild(i),c.appendChild(r),n.appendChild(c)}a.d(t,{j1:()=>n}),function(){let e=document.getElementById("upper-bar"),t=document.createElement("button");t.classList.add("dailyButton"),t.innerHTML="Daily";let a=document.createElement("button");a.classList.add("hourlyButton"),a.innerHTML="Hourly",0==e.childNodes.length?(e.appendChild(t),e.appendChild(a)):(e.replaceChild(t,e.children[0]),e.replaceChild(a,e.children[1]))}()},743:(e,t,a)=>{function n(e,t,a,n,i,o){const r=document.getElementById("basic-data");let c=document.createElement("h2");c.classList.add("cityCountryNameName"),c.innerHTML=e+", "+t;let d=document.createElement("p");d.classList.add("timeDate"),d.innerHTML=a;let s=document.createElement("div");s.classList.add("conditionContainer");let l=document.createElement("img");l.setAttribute("src",n),l.setAttribute("alt","Weather Condition Icon");let h=document.createElement("h2");h.classList.add("whetherCondition"),h.innerHTML=i,s.appendChild(h),s.appendChild(l);let u=document.createElement("h1");u.classList.add("currentTemperature"),u.innerHTML=o+" °C",0==r.childNodes.length?(r.appendChild(c),r.appendChild(d),r.appendChild(s),r.appendChild(u)):(r.replaceChild(c,r.children[0]),r.replaceChild(d,r.children[1]),r.replaceChild(s,r.children[2]),r.replaceChild(u,r.children[3]))}function i(e,t,a,n,i){const o=document.getElementById("additional-data");let r=document.createElement("p");r.classList.add("humidityData"),r.innerHTML="Humidity "+e+" %";let c=document.createElement("p");c.classList.add("feelslikeData"),c.innerHTML="Feels Like "+t+" °C";let d=document.createElement("p");d.classList.add("windspeedData"),d.innerHTML="Wind Speed "+a+" kph",0==n[0]&&((n=n.split("")).shift(),n=n.join(""));let s=document.createElement("p");s.classList.add("sunriseData"),s.innerHTML="Sunrise "+n,0==i[0]&&((i=i.split("")).shift(),i=i.join(""));let l=document.createElement("p");l.classList.add("sunsetData"),l.innerHTML="Sunset "+i,0==o.childNodes.length?(o.appendChild(r),o.appendChild(c),o.appendChild(d),o.appendChild(s),o.appendChild(l)):(o.replaceChild(r,o.children[0]),o.replaceChild(c,o.children[1]),o.replaceChild(d,o.children[2]),o.replaceChild(s,o.children[3]),o.replaceChild(l,o.children[4]))}a.d(t,{X:()=>n,d:()=>i})},304:(e,t,a)=>{a.d(t,{s:()=>n});const n="f06d23d621c748f1aed94259232004"},530:(e,t,a)=>{function n(e,t){let a=0,n=0,i=[];for(let o=0;o<Object.keys(e.day0.hour).length;o++){let r=e.day0.hour[`hour${o}`].time;if(new Date(r).getTime()>new Date(t).getTime()&&e.day0.hour[`hour${o}`].chance_of_rain>0){if(n+=1,n>1){i[1]=e.day0.hour[`hour${o}`].chance_of_rain;let t=i[0]/100,a=t+i[1]/100*(1-t);i[0]=100*a}else i.push(e.day0.hour[`hour${o}`].chance_of_rain);a+=e.day0.hour[`hour${o}`].chance_of_rain}}return 0==n?0:1==n?a:Math.round(100*i[0])/100}function i(e,t){let a=0,n=0,i=[];for(let o=0;o<Object.keys(e.day0.hour).length;o++){let r=e.day0.hour[`hour${o}`].time;if(new Date(r).getTime()>new Date(t).getTime()&&e.day0.hour[`hour${o}`].chance_of_snow>0){if(n+=1,n>1){i[1]=e.day0.hour[`hour${o}`].chance_of_snow;let t=i[0]/100,a=t+i[1]/100*(1-t);i[0]=100*a}else i.push(e.day0.hour[`hour${o}`].chance_of_snow);a+=e.day0.hour[`hour${o}`].chance_of_snow}}return 0==n?0:1==n?a:Math.round(100*i[0])/100}a.d(t,{K:()=>n,Z:()=>i})}},t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,a),o.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=a(304),t=a(743),n=a(530),i=a(810);class o{constructor(e,t,a,n,i,o,r,c,d,s,l){this.country=e,this.city=t,this.local_time=a,this.condition=n,this.condition_icon=i,this.humidity=o,this.sunrise=r,this.sunset=c,this.celsiusData=d,this.fahrenheitData=s,this.hourlyForecastData=l}basicDataDOM(){(0,t.X)(this.city,this.country,this.local_time,this.condition_icon,this.condition,this.celsiusData.temperature)}additionalDataDOM(){(0,t.d)(this.humidity,this.celsiusData.feelslike,this.celsiusData.wind,this.sunrise,this.sunset)}rainChance(){(0,n.K)(this.hourlyForecastData,this.local_time)}snowChance(){(0,n.Z)(this.hourlyForecastData,this.local_time)}}class r{constructor(e){this.dailyForecast=e}generateDailyData(){const e=document.getElementById("data-bar");for(;e.firstChild;)e.removeChild(e.firstChild);for(let e=0;e<Object.keys(this.dailyForecast).length;e++){let t=this.dailyForecast["day"+e].date,a=this.dailyForecast["day"+e].condition_icon,n=this.dailyForecast["day"+e].avg_tempC;(0,i.j1)(t,a,n)}}generateDailyDataButton(){document.getElementsByClassName("dailyButton")[0].addEventListener("click",(()=>{this.generateDailyData()}))}}class c{constructor(e){this.hourlyForecast=e}generateHourlyDataButton(){const e=document.getElementById("data-bar");document.getElementsByClassName("hourlyButton")[0].addEventListener("click",(()=>{for(;e.firstChild;)e.removeChild(e.firstChild)}))}}document.getElementById("searchButton").addEventListener("click",(t=>{t.preventDefault(),async function(t){try{const a=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${e.s}&q=${t}&days=3`,{mode:"cors"}),n=await a.json();console.log(n);const i={basic_data:{country:n.location.country,city:n.location.name,local_time:n.location.localtime,condition:n.current.condition.text,condition_icon:"https:"+n.current.condition.icon,humidity:n.current.humidity,sunrise:n.forecast.forecastday[0].astro.sunrise,sunset:n.forecast.forecastday[0].astro.sunset},celsius:{feelslike:n.current.feelslike_c,temperature:n.current.temp_c,wind:n.current.wind_kph},fahrenheit:{feelslike:n.current.feelslike_f,temperature:n.current.temp_f,wind:n.current.wind_mph},forecast:{forecast_per_day:{},forecast_per_hour:{}}};function o(){for(let e=0;e<3;e++)i.forecast.forecast_per_day["day"+e]={date:n.forecast.forecastday[e].date,condition_icon:"https:"+n.forecast.forecastday[e].day.condition.icon,avg_tempC:n.forecast.forecastday[e].day.avgtemp_c,avg_tempF:n.forecast.forecastday[e].day.avgtemp_f}}function r(){for(let e=0;e<3;e++){i.forecast.forecast_per_hour["day"+e]={date:n.forecast.forecastday[e].date},i.forecast.forecast_per_hour["day"+e].hour={};for(let t=0;t<24;t++)i.forecast.forecast_per_hour["day"+e].hour["hour"+t]={condition_icon:"https:"+n.forecast.forecastday[e].hour[t].condition.icon,temperatureC:n.forecast.forecastday[e].hour[t].temp_c,temperatureF:n.forecast.forecastday[e].hour[t].temp_f,humidity:n.forecast.forecastday[e].hour[t].humidity,chance_of_rain:n.forecast.forecastday[e].hour[t].chance_of_rain,chance_of_snow:n.forecast.forecastday[e].hour[t].chance_of_snow,time:n.forecast.forecastday[e].hour[t].time}}}return o(),r(),i}catch(c){console.log(c)}}(document.getElementById("location").value).then((e=>{const{country:t,city:a,local_time:n,condition:i,condition_icon:d,humidity:s,sunrise:l,sunset:h}=e.basic_data,u=e.celsius,m=e.fahrenheit,y=e.forecast.forecast_per_day,f=e.forecast.forecast_per_hour,p=new o(t,a,n,i,d,s,l,h,u,m,f),_=new r(y),C=new c(f);_.generateDailyData(),_.generateDailyDataButton(),C.generateHourlyDataButton(),p.basicDataDOM(),p.additionalDataDOM()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,