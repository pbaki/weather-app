(()=>{"use strict";var e={810:(e,t,a)=>{function n(e,t,a,n){let i=document.getElementById("data-bar"),o=document.createElement("p");o.classList.add("dailyDateHolder");let r=e.split("-").slice(1,3).join("/");0==r.split("")[6]&&(r=r.split(""),r.splice(6,1),r=r.join("")),r&&(o.innerHTML=r);let c=document.createElement("img");c.classList.add("dailyConditionIcon"),c.setAttribute("src",t),c.setAttribute("alt","Weather Condition Icon");let d=document.createElement("p");d.classList.add("dailyConditionText"),d.innerHTML=n;let s=document.createElement("h2");s.classList.add("dailyTemperatureHolder"),s.innerHTML=a+" °C";let l=document.createElement("div");l.classList.add("dailyContainer"),l.appendChild(c),l.appendChild(d),l.appendChild(o),l.appendChild(s),i.appendChild(l)}a.d(t,{j:()=>n}),function(){let e=document.getElementById("upper-bar"),t=document.createElement("button");t.classList.add("dailyButton"),t.innerHTML="Daily";let a=document.createElement("button");a.classList.add("hourlyButton"),a.innerHTML="Hourly";let n=document.createElement("div");n.classList.add("arrowContainer");let i=document.createElement("p");i.classList.add("leftArrow");let o=document.createElement("p");o.classList.add("rightArrow"),n.appendChild(i),n.appendChild(o),0==e.childNodes.length?(e.appendChild(t),e.appendChild(a),e.appendChild(n)):(e.replaceChild(t,e.children[0]),e.replaceChild(a,e.children[1]),e.replaceChild(n,e.children[2]))}(),function(){const e=document.getElementById("data-bar");e.addEventListener("wheel",(t=>{t.preventDefault(),e.scrollBy({left:t.deltaY<0?-30:30})}))}()},743:(e,t,a)=>{a.d(t,{Xu:()=>i,dj:()=>o});var n=a(530);function i(e,t,a,n,i,o){const r=document.getElementById("basic-data");let c=document.createElement("h2");c.classList.add("cityCountryNameName"),c.innerHTML=e+", "+t;let d=document.createElement("p");d.classList.add("timeDate"),d.innerHTML=a;let s=document.createElement("div");s.classList.add("conditionContainer");let l=document.createElement("img");l.setAttribute("src",n),l.setAttribute("alt","Weather Condition Icon");let h=document.createElement("h2");h.classList.add("whetherCondition"),h.innerHTML=i,s.appendChild(h),s.appendChild(l);let u=document.createElement("h1");u.classList.add("currentTemperature"),u.innerHTML=o+" °C",0==r.childNodes.length?(r.appendChild(c),r.appendChild(d),r.appendChild(s),r.appendChild(u)):(r.replaceChild(c,r.children[0]),r.replaceChild(d,r.children[1]),r.replaceChild(s,r.children[2]),r.replaceChild(u,r.children[3]))}function o(e,t,a,i,o,r,c){const d=document.getElementById("additional-data");let s=document.createElement("p");s.classList.add("humidityData"),s.innerHTML="Humidity<br>"+e+" %";let l=document.createElement("p");l.classList.add("feelslikeData"),l.innerHTML="Feels Like<br>"+t+" °C";let h=document.createElement("p");h.classList.add("windspeedData"),h.innerHTML="Wind Speed<br>"+a+" kph";let u=document.createElement("p");u.classList.add("chanceRainData"),u.innerHTML="Chance Of Rain<br>"+(0,n.K)(c,r)+" %",0==i[0]&&((i=i.split("")).shift(),i=i.join(""));let p=document.createElement("p");p.classList.add("sunriseData"),p.innerHTML="Sunrise<br>"+i,0==o[0]&&((o=o.split("")).shift(),o=o.join(""));let y=document.createElement("p");y.classList.add("sunsetData"),y.innerHTML="Sunset<br>"+o,0==d.childNodes.length?(d.appendChild(s),d.appendChild(l),d.appendChild(h),d.appendChild(p),d.appendChild(y),d.appendChild(u)):(d.replaceChild(s,d.children[0]),d.replaceChild(l,d.children[1]),d.replaceChild(h,d.children[2]),d.replaceChild(p,d.children[3]),d.replaceChild(y,d.children[4]),d.replaceChild(u,d.children[5]))}},304:(e,t,a)=>{a.d(t,{s:()=>n});const n="f06d23d621c748f1aed94259232004"},530:(e,t,a)=>{function n(e,t){let a=0,n=0,i=[];for(let o=0;o<Object.keys(e.day0.hour).length;o++){let r=e.day0.hour[`hour${o}`].time;if(new Date(r).getTime()>new Date(t).getTime()&&e.day0.hour[`hour${o}`].chance_of_rain>0){if(n+=1,n>1){i[1]=e.day0.hour[`hour${o}`].chance_of_rain;let t=i[0]/100,a=t+i[1]/100*(1-t);i[0]=100*a}else i.push(e.day0.hour[`hour${o}`].chance_of_rain);a+=e.day0.hour[`hour${o}`].chance_of_rain}}return 0==n?0:1==n?a:Math.round(100*i[0])/100}a.d(t,{K:()=>n})}},t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,a),o.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=a(304),t=a(743),n=a(810);class i{constructor(e,t,a,n,i,o,r,c,d,s,l){this.country=e,this.city=t,this.local_time=a,this.condition=n,this.condition_icon=i,this.humidity=o,this.sunrise=r,this.sunset=c,this.celsiusData=d,this.fahrenheitData=s,this.hourlyForecastData=l}basicDataDOM(){(0,t.Xu)(this.city,this.country,this.local_time,this.condition_icon,this.condition,this.celsiusData.temperature)}additionalDataDOM(){(0,t.dj)(this.humidity,this.celsiusData.feelslike,this.celsiusData.wind,this.sunrise,this.sunset,this.local_time,this.hourlyForecastData)}}class o{constructor(e){this.dailyForecast=e}generateDailyData(){const e=document.getElementById("data-bar");for(;e.firstChild;)e.removeChild(e.firstChild);for(let e=0;e<Object.keys(this.dailyForecast).length;e++){let t=this.dailyForecast["day"+e].date,a=this.dailyForecast["day"+e].condition_icon,i=this.dailyForecast["day"+e].avg_tempC,o=this.dailyForecast["day"+e].condition;(0,n.j)(t,a,i,o)}}generateDailyDataButton(){document.getElementsByClassName("dailyButton")[0].addEventListener("click",(()=>{this.generateDailyData()}))}}class r{constructor(e){this.hourlyForecast=e}generateHourlyData(){const e=document.getElementById("data-bar");for(;e.firstChild;)e.removeChild(e.firstChild);for(let e=0;e<Object.keys(this.hourlyForecast).length;e++)for(let t=0;t<24;t++){let a=this.hourlyForecast["day"+e].hour["hour"+t].time,i=this.hourlyForecast["day"+e].hour["hour"+t].condition_icon,o=this.hourlyForecast["day"+e].hour["hour"+t].temperatureC,r=this.hourlyForecast["day"+e].hour["hour"+t].condition;(0,n.j)(a,i,o,r)}}generateHourlyDataButton(){document.getElementsByClassName("hourlyButton")[0].addEventListener("click",(()=>{this.generateHourlyData()}))}}function c(t){(async function(t){try{let a=await("krakow"==t?t+" pl":t);console.log(t),console.log(a);const n=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${e.s}&q=${a}&days=3`,{mode:"cors"}),i=await n.json(),o={basic_data:{country:i.location.country,city:i.location.name,local_time:i.location.localtime,condition:i.current.condition.text,condition_icon:"https:"+i.current.condition.icon,humidity:i.current.humidity,sunrise:i.forecast.forecastday[0].astro.sunrise,sunset:i.forecast.forecastday[0].astro.sunset},celsius:{feelslike:i.current.feelslike_c,temperature:i.current.temp_c,wind:i.current.wind_kph},fahrenheit:{feelslike:i.current.feelslike_f,temperature:i.current.temp_f,wind:i.current.wind_mph},forecast:{forecast_per_day:{},forecast_per_hour:{}}};function r(){for(let e=0;e<3;e++)o.forecast.forecast_per_day["day"+e]={date:i.forecast.forecastday[e].date,condition_icon:"https:"+i.forecast.forecastday[e].day.condition.icon,condition:i.forecast.forecastday[e].day.condition.text,avg_tempC:i.forecast.forecastday[e].day.avgtemp_c,avg_tempF:i.forecast.forecastday[e].day.avgtemp_f}}function c(){for(let e=0;e<3;e++){o.forecast.forecast_per_hour["day"+e]={date:i.forecast.forecastday[e].date},o.forecast.forecast_per_hour["day"+e].hour={};for(let t=0;t<24;t++)o.forecast.forecast_per_hour["day"+e].hour["hour"+t]={condition_icon:"https:"+i.forecast.forecastday[e].hour[t].condition.icon,condition:i.forecast.forecastday[e].hour[t].condition.text,temperatureC:i.forecast.forecastday[e].hour[t].temp_c,temperatureF:i.forecast.forecastday[e].hour[t].temp_f,humidity:i.forecast.forecastday[e].hour[t].humidity,chance_of_rain:i.forecast.forecastday[e].hour[t].chance_of_rain,chance_of_snow:i.forecast.forecastday[e].hour[t].chance_of_snow,time:i.forecast.forecastday[e].hour[t].time}}}return r(),c(),o}catch(d){console.log(d)}})(t).then((e=>{const{country:t,city:a,local_time:n,condition:c,condition_icon:d,humidity:s,sunrise:l,sunset:h}=e.basic_data,u=e.celsius,p=e.fahrenheit,y=e.forecast.forecast_per_day,m=e.forecast.forecast_per_hour,f=new i(t,a,n,c,d,s,l,h,u,p,m),_=new o(y),C=new r(m);_.generateDailyData(),_.generateDailyDataButton(),C.generateHourlyDataButton(),f.basicDataDOM(),f.additionalDataDOM()})).catch((e=>{console.log(e)}))}document.getElementById("searchButton").addEventListener("click",(e=>{e.preventDefault(),c(document.getElementById("location").value)})),async function(){try{const t=await fetch(`https://api.weatherapi.com/v1/ip.json?key=${e.s}&q=auto:ip`,{mode:"cors"}),a=await t.json();return console.log(a),{ip:a.ip,city:a.city,country:a.country_name}}catch(e){console.log(e)}}().then((e=>{c(e.ip)})).catch((e=>{console.log(e),c("London")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,