(()=>{"use strict";var e={743:(e,t,a)=>{function o(e,t,a,o,r,c){const n=document.getElementById("basic-data");let i=document.createElement("h2");i.classList.add("cityCountryNameName"),i.innerHTML=e+", "+t;let s=document.createElement("p");s.classList.add("timeDate"),s.innerHTML=a;let d=document.createElement("div");d.classList.add("conditionContainer");let h=document.createElement("img");h.setAttribute("src",o),h.setAttribute("alt","Weather Condition Icon");let l=document.createElement("h2");l.classList.add("whetherCondition"),l.innerHTML=r,d.appendChild(l),d.appendChild(h);let u=document.createElement("h1");u.classList.add("currentTemperature"),u.innerHTML=c+" °C",0==n.childNodes.length?(n.appendChild(i),n.appendChild(s),n.appendChild(d),n.appendChild(u)):(n.replaceChild(i,n.children[0]),n.replaceChild(s,n.children[1]),n.replaceChild(d,n.children[2]),n.replaceChild(u,n.children[3]))}function r(e,t,a){const o=document.getElementById("additional-data");let r=document.createElement("p");r.classList.add("humidityData"),r.innerHTML="humidity "+e+" %";let c=document.createElement("p");c.classList.add("feelslikeData"),c.innerHTML="Feels Like "+t+" °C";let n=document.createElement("p");n.classList.add("windspeedData"),n.innerHTML="Wind Speed "+a+" kph",0==o.childNodes.length?(o.appendChild(r),o.appendChild(c),o.appendChild(n)):(o.replaceChild(r,o.children[0]),o.replaceChild(c,o.children[1]),o.replaceChild(n,o.children[2]))}a.d(t,{X:()=>o,d:()=>r})},304:(e,t,a)=>{a.d(t,{s:()=>o});const o="f06d23d621c748f1aed94259232004"}},t={};function a(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={exports:{}};return e[o](c,c.exports,a),c.exports}a.d=(e,t)=>{for(var o in t)a.o(t,o)&&!a.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=a(304),t=a(743);class o{constructor(e,t,a,o,r,c,n,i,s,d,h){this.country=e,this.city=t,this.local_time=a,this.condition=o,this.condition_icon=r,this.humidity=c,this.sunrise=n,this.sunset=i,this.celsiusData=s,this.fahrenheitData=d,this.hourlyForecastData=h}basicDataDOM(){(0,t.X)(this.city,this.country,this.local_time,this.condition_icon,this.condition,this.celsiusData.temperature)}fahrenheitDataDOM(){(0,t.d)(this.humidity,this.celsiusData.feelslike,this.celsiusData.wind)}rainChance(){!function(e,t){let a=0,o=0,r=[];for(let c=0;c<Object.keys(e.day0.hour).length;c++){let n=e.day0.hour[`hour${c}`].time;if(new Date(n).getTime()>new Date(t).getTime()&&e.day0.hour[`hour${c}`].chance_of_rain>0){if(o+=1,o>1){r[1]=e.day0.hour[`hour${c}`].chance_of_rain;let t=r[0]/100,a=t+r[1]/100*(1-t);r[0]=100*a}else r.push(e.day0.hour[`hour${c}`].chance_of_rain);a+=e.day0.hour[`hour${c}`].chance_of_rain}}0==o||1==o||Math.round(100*r[0])}(this.hourlyForecastData,this.local_time)}snowChance(){!function(e,t){let a=0,o=0,r=[];for(let c=0;c<Object.keys(e.day0.hour).length;c++){let n=e.day0.hour[`hour${c}`].time;if(new Date(n).getTime()>new Date(t).getTime()&&e.day0.hour[`hour${c}`].chance_of_snow>0){if(o+=1,o>1){r[1]=e.day0.hour[`hour${c}`].chance_of_snow;let t=r[0]/100,a=t+r[1]/100*(1-t);r[0]=100*a}else r.push(e.day0.hour[`hour${c}`].chance_of_snow);a+=e.day0.hour[`hour${c}`].chance_of_snow}}0==o||1==o||Math.round(100*r[0])}(this.hourlyForecastData,this.local_time)}}class r{constructor(e){this.dailyForecast=e}test(){console.log(this.dailyForecast)}}class c{constructor(e){this.hourlyForecast=e}test(){console.log(this.hourlyForecast)}}document.getElementById("searchButton").addEventListener("click",(t=>{t.preventDefault(),async function(t){try{const a=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${e.s}&q=${t}&days=3`,{mode:"cors"}),o=await a.json();console.log(o);const r={basic_data:{country:o.location.country,city:o.location.name,local_time:o.location.localtime,condition:o.current.condition.text,condition_icon:"https:"+o.current.condition.icon,humidity:o.current.humidity,sunrise:o.forecast.forecastday[0].astro.sunrise,sunset:o.forecast.forecastday[0].astro.sunset},celsius:{feelslike:o.current.feelslike_c,temperature:o.current.temp_c,wind:o.current.wind_kph},fahrenheit:{feelslike:o.current.feelslike_f,temperature:o.current.temp_f,wind:o.current.wind_mph},forecast:{forecast_per_day_Celsius:{},forecast_per_day_Fahrenheit:{},forecast_per_hour:{}}};function c(){for(let e=0;e<3;e++)r.forecast.forecast_per_day_Celsius["day"+e]={date:o.forecast.forecastday[e].date,min_temp:o.forecast.forecastday[e].day.mintemp_c,max_temp:o.forecast.forecastday[e].day.maxtemp_c}}function n(){for(let e=0;e<3;e++)r.forecast.forecast_per_day_Fahrenheit["day"+e]={date:o.forecast.forecastday[e].date,min_temp:o.forecast.forecastday[e].day.mintemp_f,max_temp:o.forecast.forecastday[e].day.maxtemp_f}}function i(){for(let e=0;e<3;e++){r.forecast.forecast_per_hour["day"+e]={date:o.forecast.forecastday[e].date},r.forecast.forecast_per_hour["day"+e].hour={};for(let t=0;t<24;t++)r.forecast.forecast_per_hour["day"+e].hour["hour"+t]={condition_icon:"https:"+o.forecast.forecastday[e].hour[t].condition.icon,temperatureC:o.forecast.forecastday[e].hour[t].temp_c,temperatureF:o.forecast.forecastday[e].hour[t].temp_f,humidity:o.forecast.forecastday[e].hour[t].humidity,chance_of_rain:o.forecast.forecastday[e].hour[t].chance_of_rain,chance_of_snow:o.forecast.forecastday[e].hour[t].chance_of_snow,time:o.forecast.forecastday[e].hour[t].time}}}return c(),n(),i(),r}catch(s){console.log(s)}}(document.getElementById("location").value).then((e=>{const{country:t,city:a,local_time:n,condition:i,condition_icon:s,humidity:d,sunrise:h,sunset:l}=e.basic_data,u=e.celsius,f=e.fahrenheit,m=e.forecast.forecast_per_day_Celsius,y=e.forecast.forecast_per_hour,p=new o(t,a,n,i,s,d,h,l,u,f,y);new r(m),new c(y),p.rainChance(),p.snowChance(),p.basicDataDOM(),p.fahrenheitDataDOM()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,