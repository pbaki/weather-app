(()=>{"use strict";var e={743:(e,t,a)=>{function o(e,t,a,o,r,c){const i=document.getElementById("basic-data");let n=document.createElement("h2");n.classList.add("cityCountryNameName"),n.innerHTML=e+", "+t;let s=document.createElement("p");s.classList.add("timeDate"),s.innerHTML=a;let d=document.createElement("div");d.classList.add("conditionContainer");let l=document.createElement("img");l.setAttribute("src",o),l.setAttribute("alt","Weather Condition Icon");let h=document.createElement("h2");h.classList.add("whetherCondition"),h.innerHTML=r,d.appendChild(h),d.appendChild(l);let u=document.createElement("h1");u.classList.add("currentTemperature"),u.innerHTML=c+" °C",0==i.childNodes.length?(i.appendChild(n),i.appendChild(s),i.appendChild(d),i.appendChild(u)):(i.replaceChild(n,i.children[0]),i.replaceChild(s,i.children[1]),i.replaceChild(d,i.children[2]),i.replaceChild(u,i.children[3]))}function r(e,t,a){const o=document.getElementById("additional-data");let r=document.createElement("p");r.classList.add("humidityData"),r.innerHTML="humidity "+e+" %";let c=document.createElement("p");c.classList.add("feelslikeData"),c.innerHTML="Feels Like "+t+" °C";let i=document.createElement("p");i.classList.add("windspeedData"),i.innerHTML="Wind Speed "+a+" kph",0==o.childNodes.length?(o.appendChild(r),o.appendChild(c),o.appendChild(i)):(o.replaceChild(r,o.children[0]),o.replaceChild(c,o.children[1]),o.replaceChild(i,o.children[2]))}a.d(t,{X:()=>o,d:()=>r})},304:(e,t,a)=>{a.d(t,{s:()=>o});const o="f06d23d621c748f1aed94259232004"}},t={};function a(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={exports:{}};return e[o](c,c.exports,a),c.exports}a.d=(e,t)=>{for(var o in t)a.o(t,o)&&!a.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=a(304),t=a(743);class o{constructor(e,t,a,o,r,c,i,n,s,d,l){this.country=e,this.city=t,this.local_time=a,this.condition=o,this.condition_icon=r,this.humidity=c,this.sunrise=i,this.sunset=n,this.celsiusData=s,this.fahrenheitData=d,this.hourlyForecastData=l}basicDataDOM(){(0,t.X)(this.city,this.country,this.local_time,this.condition_icon,this.condition,this.celsiusData.temperature)}fahrenheitDataDOM(){(0,t.d)(this.humidity,this.celsiusData.feelslike,this.celsiusData.wind)}chanceOfRain(){let e=0,t=0;for(let a=0;a<Object.keys(this.hourlyForecastData.day0.hour).length;a++){let o=this.hourlyForecastData.day0.hour[`hour${a}`].time;new Date(o).getTime()>new Date(this.local_time).getTime()&&(t+=1,e+=this.hourlyForecastData.day0.hour[`hour${a}`].chance_of_rain)}let a=e/t;return Math.round(100*a)/100}chanceOfSnow(){let e=0,t=0;for(let a=0;a<Object.keys(this.hourlyForecastData.day0.hour).length;a++){let o=this.hourlyForecastData.day0.hour[`hour${a}`].time;new Date(o).getTime()>new Date(this.local_time).getTime()&&(t+=1,e+=this.hourlyForecastData.day0.hour[`hour${a}`].chance_of_snow)}let a=e/t;return console.log(Math.round(100*a)/100),Math.round(100*a)/100}}class r{constructor(e){this.dailyForecast=e}test(){console.log(this.dailyForecast)}}class c{constructor(e){this.hourlyForecast=e}test(){console.log(this.hourlyForecast)}}document.getElementById("searchButton").addEventListener("click",(t=>{t.preventDefault(),async function(t){try{const a=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${e.s}&q=${t}&days=3`,{mode:"cors"}),o=await a.json();console.log(o);const r={basic_data:{country:o.location.country,city:o.location.name,local_time:o.location.localtime,condition:o.current.condition.text,condition_icon:"https:"+o.current.condition.icon,humidity:o.current.humidity,sunrise:o.forecast.forecastday[0].astro.sunrise,sunset:o.forecast.forecastday[0].astro.sunset},celsius:{feelslike:o.current.feelslike_c,temperature:o.current.temp_c,wind:o.current.wind_kph},fahrenheit:{feelslike:o.current.feelslike_f,temperature:o.current.temp_f,wind:o.current.wind_mph},forecast:{forecast_per_day_Celsius:{},forecast_per_day_Fahrenheit:{},forecast_per_hour:{}}};function c(){for(let e=0;e<3;e++)r.forecast.forecast_per_day_Celsius["day"+e]={date:o.forecast.forecastday[e].date,min_temp:o.forecast.forecastday[e].day.mintemp_c,max_temp:o.forecast.forecastday[e].day.maxtemp_c}}function i(){for(let e=0;e<3;e++)r.forecast.forecast_per_day_Fahrenheit["day"+e]={date:o.forecast.forecastday[e].date,min_temp:o.forecast.forecastday[e].day.mintemp_f,max_temp:o.forecast.forecastday[e].day.maxtemp_f}}function n(){for(let e=0;e<3;e++){r.forecast.forecast_per_hour["day"+e]={date:o.forecast.forecastday[e].date},r.forecast.forecast_per_hour["day"+e].hour={};for(let t=0;t<24;t++)r.forecast.forecast_per_hour["day"+e].hour["hour"+t]={condition_icon:"https:"+o.forecast.forecastday[e].hour[t].condition.icon,temperatureC:o.forecast.forecastday[e].hour[t].temp_c,temperatureF:o.forecast.forecastday[e].hour[t].temp_f,humidity:o.forecast.forecastday[e].hour[t].humidity,chance_of_rain:o.forecast.forecastday[e].hour[t].chance_of_rain,chance_of_snow:o.forecast.forecastday[e].hour[t].chance_of_snow,time:o.forecast.forecastday[e].hour[t].time}}}return c(),i(),n(),r}catch(s){console.log(s)}}(document.getElementById("location").value).then((e=>{const{country:t,city:a,local_time:i,condition:n,condition_icon:s,humidity:d,sunrise:l,sunset:h}=e.basic_data,u=e.celsius,f=e.fahrenheit,m=e.forecast.forecast_per_day_Celsius,y=e.forecast.forecast_per_hour,p=new o(t,a,i,n,s,d,l,h,u,f,y);new r(m),new c(y),p.chanceOfRain(),p.chanceOfSnow(),p.basicDataDOM(),p.fahrenheitDataDOM()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,